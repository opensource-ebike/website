"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8709],{3905:function(e,t,n){n.d(t,{Zo:function(){return f},kt:function(){return p}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},f=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,f=s(e,["components","mdxType","originalType","parentName"]),c=d(n),p=o,h=c["".concat(l,".").concat(p)]||c[p]||u[p]||a;return n?r.createElement(h,i(i({ref:t},f),{},{components:n})):r.createElement(h,i({ref:t},f))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9562:function(e,t,n){n.r(t),n.d(t,{assets:function(){return f},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return u}});var r=n(3117),o=n(102),a=(n(7294),n(3905)),i=["components"],s={},l=void 0,d={unversionedId:"tsdz2/flashing/Flash-the-bootloader-and-firmware-on-SW102-using-SWD",id:"tsdz2/flashing/Flash-the-bootloader-and-firmware-on-SW102-using-SWD",title:"Flash-the-bootloader-and-firmware-on-SW102-using-SWD",description:"Please follow the next steps to be able to flash the firmware.",source:"@site/docs/tsdz2/flashing/Flash-the-bootloader-and-firmware-on-SW102-using-SWD.md",sourceDirName:"tsdz2/flashing",slug:"/tsdz2/flashing/Flash-the-bootloader-and-firmware-on-SW102-using-SWD",permalink:"/docs/tsdz2/flashing/Flash-the-bootloader-and-firmware-on-SW102-using-SWD",draft:!1,editUrl:"https://github.com/OpenSourceEBike/OpenSourceEBike.github.io/tree/master/docs/tsdz2/flashing/Flash-the-bootloader-and-firmware-on-SW102-using-SWD.md",tags:[],version:"current",frontMatter:{},sidebar:"tsdz2Sidebar",previous:{title:"Flashing Firmwares",permalink:"/docs/tsdz2/flashing/"},next:{title:"Flash-the-firmware-on-850C-using-SWD",permalink:"/docs/tsdz2/flashing/Flash-the-firmware-on-850C-using-SWD"}},f={},u=[{value:"Install OpenOCD",id:"install_openocd",level:2},{value:"Test the electrical connection",id:"test_the_electrical_connection",level:2},{value:"Erase/flash",id:"eraseflash",level:2}],c={toc:u};function p(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Please follow the next steps to be able to flash the firmware."),(0,a.kt)("p",null,"_","_","TOC","_","_"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"WARNING:")," There is no way to backup the original bootloader and\nfirmware. Once you erase, booth original bootloader and firmware you\nwill be erased forever."),(0,a.kt)("h1",{id:"open_the_sw102_and_solder_swd_wires"},"Open the SW102 and solder SWD wires"),(0,a.kt)("p",null,"There are 2 ways to open and the recommended one is by cutting a side\npart because in the end the SW102 will be same water resistant just like\noriginal. Also developers will be able to debug while use the keypad."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"Open_SW102_by_cutting_a_side_part_and_solder_SWD_wires",title:"wikilink"},"Open SW102 by cutting a side part and solder SWD\nwires")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"Open_SW102_by_cutting_keypad_base_and_solder_SWD_wires",title:"wikilink"},"Open SW102 by cutting keypad base and solder SWD\nwires"))),(0,a.kt)("h1",{id:"download_the_firmware"},"Download the firmware"),(0,a.kt)("p",null,"Download the latest version of the firmware from\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OpenSourceEBike/SW102_LCD_Bluetooth/releases"},"1"),".\nYou will only need the ","`","sw102-full-x.y.z.hex","`"," file for now (the latest\nas of writing this line is ","`","sw102-full-0.19.17.hex","`","). For any later\nupdates you\\'ll just use our bluetooth bootloader and update the\nsoftware via your Android or iOS phone."),(0,a.kt)("h1",{id:"st_link_driver_windows_only"},"ST-LINK driver (Windows only)"),(0,a.kt)("p",null,"Before connecting the ST-LINK to your machine, download the driver\n",(0,a.kt)("a",{parentName:"p",href:"https://www.st.com/en/development-tools/stsw-link009.html"},"2"),'. Scroll\ndown to the bottom of the page to the \\"GET SOFTWARE\\" section and\ndownload \\"STSW-LINK009\\".'),(0,a.kt)("h1",{id:"standalone_flash_method_windows_only"},"Standalone flash method (Windows only)"),(0,a.kt)("p",null,"For Windows we packed a stand alone flash program. Download ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OpenSource-EBike-firmware/Color_LCD/blob/master/Bafang_LCD_SW102/SW102_First_Install_Windows.zip"},"this zip\nfile"),"\nand unzip it somewhere on your computer. Download the latest full\nversion hex file from\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OpenSource-EBike-firmware/SW102_LCD_Bluetooth/releases"},"3"),'\ninto the unzipped \\"SW102_First_Install_Windows\\" folder.\\\nNow you can hit \\"start.bat\\" and follow the instructions on the\nscreen!\\\nCommon error message are:\\\n\\\nNo STLink connected at all (or no drivers installed):\n',(0,a.kt)("a",{parentName:"p",href:"https://github.com/OpenSource-EBike-firmware/Color_LCD/blob/master/Bafang_LCD_SW102/STLink_ErrorNoDevice.jpg"},"https://github.com/OpenSource-EBike-firmware/Color_LCD/blob/master/Bafang_LCD_SW102/STLink_ErrorNoDevice.jpg")),(0,a.kt)("p",null,"Connection to the SW102 wrong or bad:\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OpenSource-EBike-firmware/Color_LCD/blob/master/Bafang_LCD_SW102/STLink_ErrorWires.jpg"},"https://github.com/OpenSource-EBike-firmware/Color_LCD/blob/master/Bafang_LCD_SW102/STLink_ErrorWires.jpg")),(0,a.kt)("p",null,"If everything went well it should look like this:\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OpenSource-EBike-firmware/Color_LCD/blob/master/Bafang_LCD_SW102/STLink_FlashingOK.jpg"},"https://github.com/OpenSource-EBike-firmware/Color_LCD/blob/master/Bafang_LCD_SW102/STLink_FlashingOK.jpg")),(0,a.kt)("h1",{id:"manual_flash_method_windowslinuxmacos"},"Manual flash method (Windows/Linux/MacOS)"),(0,a.kt)("h2",{id:"install_openocd"},"Install OpenOCD"),(0,a.kt)("p",null,"OpenOCD is a great free tool that we will use to talk to the SW102 with\nthe ST-LINK."),(0,a.kt)("p",null,"Windows: ",(0,a.kt)("a",{parentName:"p",href:"http://gnutoolchains.com/arm-eabi/openocd/%7Cdownload"},"the binaries from\nhere"),"."),(0,a.kt)("p",null,"Linux: e.g. on ubuntu/debian ","`","`","`"," sudo apt install openocd ","`","`","`"),(0,a.kt)("p",null,"MacOS: e.g. with Homebrew ","`","`","`"," brew install open-ocd ","`","`","`"),(0,a.kt)("h2",{id:"test_the_electrical_connection"},"Test the electrical connection"),(0,a.kt)("p",null,"It\\'s time to connect your ST-LINK, your SW102 and your machine! Your\nSW102 will turn on (it will take Windows a minute to install the\ndrivers). If you have the SW102 already connected to your battery pack,\nmake sure the battery is ","*","*","OFF","*","*"," while doing this installation. The\npower for your SW102 will come from the ST-LINK ","*","*","ONLY","*","*","."),(0,a.kt)("p",null,"Windows: ","`","`","`"," openocd -f\n..","\\","share","\\","openocd","\\","scripts","\\","interface","\\","stlink.cfg -f\n..","\\","share","\\","openocd","\\","scripts","\\","target","\\","nrf51.cfg ","`","`","`"," Linux/MaxOS:\n","`","`","`"," openocd -f \\$(dirname \\$(which\nopenocd))/../share/openocd/scripts/interface/stlink-v2.cfg -f \\$(dirname\n\\$(which openocd))/../share/openocd/scripts/target/nrf51.cfg ","`","`","`"),(0,a.kt)("p",null,"You should then see something like this:"),(0,a.kt)("p",null,"`","`","`"," Open On-Chip Debugger 0.10.0 ","[",".","..","]"," Info : STLINK v2 JTAG v29\nAPI v2 SWIM v7 VID 0x0483 PID 0x3748 Info : using stlink api v2 Info :\nTarget voltage: 3.242857 Info : nrf51.cpu: hardware has 4 breakpoints, 2\nwatchpoints ","`","`","`"),(0,a.kt)("p",null,"If it instead says: ","`","`","`"," Error: open failed ","`","`","`"),(0,a.kt)("p",null,"That means your ST-LINK is not found via USB"),(0,a.kt)("p",null,"If it says: ","`","`","`"," Error: init mode failed (unable to connect to the\ntarget) ","`","`","`"),(0,a.kt)("p",null,"That means there is something wrong with the four wires from the ST-LINK\nto the SW-102."),(0,a.kt)("p",null,"After confirming OpenOCD can see your board, press ctrl-C to exit."),(0,a.kt)("h2",{id:"eraseflash"},"Erase/flash"),(0,a.kt)("p",null,"Tip (Linux only): if trying the solderless install option, the utility\n","`","run-one-until-success","`"," is very helpful to wrap the command and have\nit perpetually retry until it succeeds."),(0,a.kt)("p",null,"Windows: ","`","`","`"," openocd -f\n..","\\","share","\\","openocd","\\","scripts","\\","interface","\\","stlink.cfg -f\n..","\\","share","\\","openocd","\\","scripts","\\","target","\\",'nrf51.cfg -c \\"init; reset init;\nnrf51 mass_erase; flash write_image sw102-full-0.19.xxx.hex;\nverify_image sw102-full-0.19.xxx.hex; echo FLASHED; reset halt; resume;\nshutdown\\" ',"`","`","`"),(0,a.kt)("p",null,"Linux/MacOS: ","`","`","`"," IMG=","~",'/Downloads/sw102-full-0.19.17.hex openocd -f\n\\$(dirname \\$(which\nopenocd))/../share/openocd/scripts/interface/stlink-v2.cfg -f \\$(dirname\n\\$(which openocd))/../share/openocd/scripts/target/nrf51.cfg -c \\"init;\nreset init; nrf51 mass_erase; flash write_image \\$IMG; verify_image\n\\$IMG; echo FLASHED; reset halt; resume; shutdown\\" ',"`","`","`"),(0,a.kt)("p",null,"Example output from a successful erase/flash: ","`","`","`"," Open On-Chip\nDebugger 0.10.0 Licensed under GNU GPL v2 For bug reports, read"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"\xa0\xa0\xa0"),(0,a.kt)("a",{parentName:"p",href:"http://openocd.org/doc/doxygen/bugs.html"},(0,a.kt)("inlineCode",{parentName:"a"},"http://openocd.org/doc/doxygen/bugs.html"))),(0,a.kt)("p",null,'Info : auto-selecting first available session transport \\"hla_swd\\". To\noverride use \\\'transport select ',(0,a.kt)("inlineCode",{parentName:"p"},"<transport>"),'{=html}\\\'. Info : The\nselected transport took over low-level target control. The results might\ndiffer compared to plain JTAG/SWD adapter speed: 1000 kHz Info : Unable\nto match requested speed 1000 kHz, using 950 kHz Info : Unable to match\nrequested speed 1000 kHz, using 950 kHz Info : clock speed 950 kHz Info\n: STLINK v2 JTAG v29 API v2 SWIM v7 VID 0x0483 PID 0x3748 Info : using\nstlink api v2 Info : Target voltage: 3.254183 Info : nrf51.cpu: hardware\nhas 4 breakpoints, 2 watchpoints target halted due to debug-request,\ncurrent mode: Thread xPSR: 0xc1000000 pc: 0xfffffffe msp: 0xfffffffc\nWarn : Unknown device (HWID 0x000000d6) Info : Padding image section 0\nwith 2112 bytes Info : Padding image section 1 with 32 bytes Info :\nPadding image section 2 with 17680 bytes Info : Padding image section 3\nwith 428 bytes Warn : using fast async flash loader. This is currently\nsupported Warn : only with ST-Link and CMSIS-DAP. If you have issues,\nadd Warn : \\"set WORKAREASIZE 0\\" before sourcing nrf51.cfg to disable\nit target halted due to breakpoint, current mode: Thread xPSR:\n0x61000000 pc: 0x2000001e msp: 0xfffffffc Warn : using fast async flash\nloader. This is currently supported Warn : only with ST-Link and\nCMSIS-DAP. If you have issues, add Warn : \\"set WORKAREASIZE 0\\" before\nsourcing nrf51.cfg to disable it target halted due to breakpoint,\ncurrent mode: Thread xPSR: 0x61000000 pc: 0x2000001e msp: 0xfffffffc\nwrote 261216 bytes from file ',"~","/Downloads/sw102-full-0.19.17.hex in\n5.122993s (49.794 KiB/s) target halted due to breakpoint, current mode:\nThread xPSR: 0x61000000 pc: 0x2000002e msp: 0xfffffffc target halted due\nto breakpoint, current mode: Thread xPSR: 0x61000000 pc: 0x2000002e msp:\n0xfffffffc target halted due to breakpoint, current mode: Thread xPSR:\n0x61000000 pc: 0x2000002e msp: 0xfffffffc target halted due to\nbreakpoint, current mode: Thread xPSR: 0x61000000 pc: 0x2000002e msp:\n0xfffffffc target halted due to breakpoint, current mode: Thread xPSR:\n0x61000000 pc: 0x2000002e msp: 0xfffffffc verified 240964 bytes in\n1.595816s (147.458 KiB/s) FLASHED target halted due to debug-request,\ncurrent mode: Thread xPSR: 0xc1000000 pc: 0x000006d0 msp: 0x000007c0\nshutdown command invoked ","`","`","`"),(0,a.kt)("h1",{id:"done"},"Done!"),(0,a.kt)("p",null,"If all went well you can now see the GUI running on our device (with a\nsimulated motor). If something doesn\\'t work please capture any console\noutput, and describe what happened in a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OpenSource-EBike-firmware/SW102_LCD_Bluetooth/issues%7Cgithub"},"bug\nreport")," -\nwe will help."))}p.isMDXComponent=!0}}]);