"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1971],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=i,u=d["".concat(s,".").concat(h)]||d[h]||m[h]||a;return n?o.createElement(u,r(r({ref:t},p),{},{components:n})):o.createElement(u,r({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var c=2;c<a;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7110:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return m}});var o=n(3117),i=n(102),a=(n(7294),n(3905)),r=["components"],l={},s="Various",c={unversionedId:"tsdz2/development/Development",id:"tsdz2/development/Development",title:"Various",description:"See here technical notes about TSDZ2:",source:"@site/docs/tsdz2/development/Development.md",sourceDirName:"tsdz2/development",slug:"/tsdz2/development/",permalink:"/docs/tsdz2/development/",draft:!1,editUrl:"https://github.com/OpenSourceEBike/OpenSourceEBike.github.io/tree/master/docs/tsdz2/development/Development.md",tags:[],version:"current",frontMatter:{},sidebar:"tsdz2Sidebar",previous:{title:"Why-should-you-use-the-Flexible-OpenSource-firmware-on-your-TSDZ2",permalink:"/docs/tsdz2/Why-should-you-use-the-Flexible-OpenSource-firmware-on-your-TSDZ2"},next:{title:"Original Protocol",permalink:"/docs/tsdz2/development/Communication-Protocol"}},p={},m=[{value:"Step 1 - Install the toolchain",id:"step_1___install_the_toolchain",level:2},{value:"For STM8",id:"for_stm8",level:3},{value:"For STM32 (ARM)",id:"for_stm32_arm",level:3},{value:"Install Toolchain on Windows",id:"install_toolchain_on_windows",level:4},{value:"Step 2 - Install JDK",id:"step_2___install_jdk",level:2},{value:"Step 3 - Install Eclipse",id:"step_3___install_eclipse",level:2},{value:"Step 4 - MCU communication",id:"step_4___mcu_communication",level:2},{value:"Eclipse Install GNU MCU tools",id:"eclipse_install_gnu_mcu_tools",level:3},{value:"OpenOCD",id:"openocd",level:3},{value:"Step 5 - Eclipse Import project from Github",id:"step_5___eclipse_import_project_from_github",level:2},{value:"Step 6 - Compile Code",id:"step_6___compile_code",level:2},{value:"Graphical with Eclipse",id:"graphical_with_eclipse",level:3},{value:"Command Line (OSX and Linux)",id:"command_line_osx_and_linux",level:3},{value:"On Windows",id:"on_windows",level:3},{value:"Step 7 - Flashing",id:"step_7___flashing",level:2},{value:"Graphical with Eclipse",id:"graphical_with_eclipse_1",level:3},{value:"Command line",id:"command_line",level:3}],d={toc:m};function h(e){var t=e.components,n=(0,i.Z)(e,r);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"various"},"Various"),(0,a.kt)("p",null,"See here technical notes about TSDZ2:\n",(0,a.kt)("a",{parentName:"p",href:"https://opensourceebikefirmware.bitbucket.io/development_tsdz2"},"https://opensourceebikefirmware.bitbucket.io/development_tsdz2")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"How_TSDZ2_torque_sensor_works",title:"wikilink"},"How TSDZ2 torque sensor\nworks")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"TSZD2_Hardware_Information",title:"wikilink"},"TSZD2 Hardware Information"))),(0,a.kt)("h1",{id:"development_software"},"Development Software"),(0,a.kt)("p",null,"On this wiki page the development software for the\nOpenSource-EBike-firmware is discribed. Although the examples are shown\nfor OSX these steps are also applicable for other operating systems like\nLinux and Windows."),(0,a.kt)("h2",{id:"step_1___install_the_toolchain"},"Step 1 - Install the toolchain"),(0,a.kt)("h3",{id:"for_stm8"},"For STM8"),(0,a.kt)("p",null,"Download and install the Small Device C Compiler (SDCC) toolchain the\n",(0,a.kt)("a",{parentName:"p",href:"http://sdcc.sourceforge.net/"},"website")," For Windows use version 3.7 or\n3.8 (NOTE: 3.9 has a bug which causes it to crash while building LCD3).\nMake sure to add it to your PATH (option in one of the last screens of\nthe installer",".",'.. ) Install/unpack the package to a separate folder,\nI\\\'ve put all my development tools in a folder in my HomeFolder called\n\\"Development\\". Use your command line tool of choice to go to this\nfolder and dive into the \\"bin\\" folder, run the command \\"sdcc -v\\". If\nthis shows the below code then the toolchain is working.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"user@pc:~/Development/sdcc-3.9.0/bin$ ./sdcc -v\nSDCC : mcs51/z80/z180/r2k/r3ka/gbz80/tlcs90/ez80_z80/ds390/pic16/pic14/TININative/ds400/hc08/s08/stm8/pdk14/pdk15 3.9.0 #11195 (Mac OS X x86_64)\npublished under GNU General Public License (GPL)\n")),(0,a.kt)("p",null,"For Linux user there is an alternative: The stm8 eforth project is\ndeveloped on linux\n(",(0,a.kt)("a",{parentName:"p",href:"https://github.com/TG9541/stm8ef/wiki/STM8S-Programming"},"1"),")"),(0,a.kt)("h3",{id:"for_stm32_arm"},"For STM32 (ARM)"),(0,a.kt)("p",null,"Download and install the GNU ARM toolchain from the\n",(0,a.kt)("a",{parentName:"p",href:"https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads"},"website"),'.\nMove the package to a separate folder, I\\\'ve put all my development\ntools in a folder in my HomeFolder called \\"Development\\". There you can\nunpack the package. Use your command line tool of choice to go to this\nfolder and dive into the \\"bin\\" folder, run the command\n\\"arm-none-eabi-gcc ',"-",'-version\\". If this shows the below code then the\ntoolchain is working.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ bin/arm-none-eabi-gcc --version\narm-none-eabi-gcc (GNU Tools for Arm Embedded Processors 8-2019-q3-update)\n8.3.1 20190703 (release) [gcc-8-branch revision 273027]\nCopyright (C) 2018 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n")),(0,a.kt)("h4",{id:"install_toolchain_on_windows"},"Install Toolchain on Windows"),(0,a.kt)("p",null,"Currently the build did not work for me on Windows (even after\ninstalling gnu make and find and placing them to the PATH). Easiest way\nto at least compile (not debug) on Windows for me was by using the ",(0,a.kt)("a",{parentName:"p",href:"https://www.windowscentral.com/install-windows-subsystem-linux-windows-10"},"The\nLinux\nSubsystem"),".\nAfter install issue"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'apt update\napt install wget bzip2 make\nwget "https://developer.arm.com/-/media/Files/downloads/gnu-rm/9-2019q4/gcc-arm-none-eabi-9-2019-q4-major-x86_64-linux.tar.bz2?revision=108bd959-44bd-4619-9c19-26187abf5225&la=en&hash=E788CE92E5DFD64B2A8C246BBA91A249CB8E2D2D" -O gcc-arm-none-eabi.tar.bz2\ntar xvf gcc-arm-none-eabi.tar.bz2\nmv gcc-arm-none-eabi-*-major /opt/gcc-arm-none-eabi\necho "export PATH=\\"/opt/gcc-arm-none-eabi/bin:$PATH\\"" >> ~/.bashrc\nsource ~/.bashrc\n')),(0,a.kt)("p",null,"you can now cd to the place where the sourcecode is located on your\nwindows under /mnt/c/ and run make all or one of the release","*",".sh\nscripts."),(0,a.kt)("h2",{id:"step_2___install_jdk"},"Step 2 - Install JDK"),(0,a.kt)("p",null,"Download and install the most current version of jdk (Java Development\nKit) from the Oracle\n",(0,a.kt)("a",{parentName:"p",href:"https://www.oracle.com/technetwork/java/javase/downloads/index.html"},"website"),"."),(0,a.kt)("h2",{id:"step_3___install_eclipse"},"Step 3 - Install Eclipse"),(0,a.kt)("p",null,'Download and install Eclipse prepared for C/C++ development: \\"Eclipse\nIDE for C/C++ Developers\\" from the\n',(0,a.kt)("a",{parentName:"p",href:"https://www.eclipse.org/downloads/packages/"},"website"),". After installing\nyou can close Eclipse."),(0,a.kt)("h2",{id:"step_4___mcu_communication"},"Step 4 - MCU communication"),(0,a.kt)("h3",{id:"eclipse_install_gnu_mcu_tools"},"Eclipse Install GNU MCU tools"),(0,a.kt)("p",null,"Start Eclipse and go to Help-",">","Marketplace, wait for the marketplace to\nupdate.\n",(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Help_Marketplace.png",title:"wikilink"},"images/Eclipse_Help_Marketplace.png")),(0,a.kt)("p",null,'Then type \\"GNU ARM\\" in the search field, the top result should show\n\\"GNU MCU Eclipse\\" press the install button. Wait for it to install,\nEclipse will ask for a restart, you can do so.\n',(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Marketplace.png",title:"wikilink"},"images/Eclipse_Marketplace.png")),(0,a.kt)("p",null,'When Eclipse is restarted close the welcome screen and click in the\ntoolbar on the icon \\"Packs\\".\n',(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Packages_Open.png",title:"wikilink"},"images/Eclipse_Packages_Open.png"),'\nIn the new window click on the double arrow sync icon called \\"Update\nthe packages definitions from all repositories\\". Wait for it to sync.\n',(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Packages_Sync.png",title:"wikilink"},"images/Eclipse_Packages_Sync.png"),'\nOnce the sync is completed you can find in the left pane in the tree the\n\\"STMicroelectronics\\" folder, unfold it and search for \\"STM32F1\nSeries\\". In the middle pane right click on the STM32F1xx file and click\ninstall. When the installation is done you can close the packs windows\n(on the right most icon right mouse click a choose close)\n',(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Packages_Close.png",title:"wikilink"},"images/Eclipse_Packages_Close.png")),(0,a.kt)("h3",{id:"openocd"},"OpenOCD"),(0,a.kt)("p",null,"Visit the OpenOCD ",(0,a.kt)("a",{parentName:"p",href:"https://gnu-mcu-eclipse.github.io/"},"website")," for more\ninformation. Once there you can\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ilg-archived/openocd/releases/tag/v0.10.0-12-20190422"},"download"),'\nthe package for your platform. Move the package to a separate folder,\nI\\\'ve put all my development tools in a folder in my HomeFolder called\n\\"Development\\". There you can unpack the package. Use your command line\ntool of choice to go to this folder and dive into the \\"bin\\" folder,\nrun the command \\"openocd ',"-",'-version\\". If this shows the below code\nthen the toolchain is working.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ ./openocd -v\nGNU MCU Eclipse OpenOCD, 64-bitOpen On-Chip Debugger 0.10.0+dev-00593-g23ad80df4 (2019-04-23-00:01)\nLicensed under GNU GPL v2\nFor bug reports, read\n    http://openocd.org/doc/doxygen/bugs.html\n")),(0,a.kt)("h2",{id:"step_5___eclipse_import_project_from_github"},"Step 5 - Eclipse Import project from Github"),(0,a.kt)("p",null,'Open a browser and navigate to the github site and into the\n\\"OpenSource-EBike-firmware/Color_LCD\\" click on the clone/copy dropdown\narrow and copy the \\"url\\".\\\nOpen Eclipse and click in the menu bar on \\"File\\" and navigate to\n\\"import\\".\n',(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Import-01.png",title:"wikilink"},"images/Eclipse_Import-01.png"),'\nSearch for the option \\"Git\\", unfold it and select \\"Projects from Git\n(with smart import)\\" click \\"Next\\".\n',(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Import-02_Git-smart.png",title:"wikilink"},"images/Eclipse_Import-02_Git-smart.png"),'\nSelect the option \\"Clone URL\\", click \\"Next\\".\n',(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Import-03_Git_url.png",title:"wikilink"},"images/Eclipse_Import-03_Git_url.png"),'\nThe URL is automatically pasted, if not, copy and paste it yourself.\nClick \\"Next\\".\n',(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Import-04_Git_settings.png",title:"wikilink"},"images/Eclipse_Import-04_Git_settings.png"),'\nSelect the \\"master\\" repository, click \\"Next\\".\n',(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Import-05_Git_master_1.png",title:"wikilink"},"images/Eclipse_Import-05_Git_master_1.png"),'\nChange the location as you like and make sure the \\"master\\" branch is\nselected. Click \\"Next\\".\n',(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Import-06_Git_master_2.png",title:"wikilink"},"images/Eclipse_Import-06_Git_master_2.png"),'\nUncheck the \\"search for nested projects\\" and click \\"Finish\\".\n',(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Import-07_Git_master_3.png",title:"wikilink"},"images/Eclipse_Import-07_Git_master_3.png")),(0,a.kt)("h2",{id:"step_6___compile_code"},"Step 6 - Compile Code"),(0,a.kt)("h3",{id:"graphical_with_eclipse"},"Graphical with Eclipse"),(0,a.kt)("p",null,'Once the project is added to Eclipse the project has to be converted to\na C/C++ project. Right click on the project folder and select \\"New\\"\nand then \\"Convert to a C/C++ project\\", select the \\"Makefile project\\"\nand \\"ARM Cross GCC\\" and click \\"Finish\\"\n',(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Projects_Convert-to-C.png",title:"wikilink"},"images/Eclipse_Projects_Convert-to-C.png"),"\n",(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Projects_Convert-to-C-settings.png",title:"wikilink"},"images/Eclipse_Projects_Convert-to-C-settings.png")),(0,a.kt)("p",null,"Then go to the project properties:\n",(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Projects_Properties.png",title:"wikilink"},"images/Eclipse_Projects_Properties.png")),(0,a.kt)("p",null,"There a few settings have to be set:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},'\\"build tools\\"'),(0,a.kt)("li",{parentName:"ol"},'\\"make settings\\"')),(0,a.kt)("p",null,"Set the build tools to the location of the \\\"ARM toolchain\\\" in \\'Step\n2\\'\n",(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Projects_Properties_BuildTools.png",title:"wikilink"},"images/Eclipse_Projects_Properties_BuildTools.png")),(0,a.kt)("p",null,'Uncheck the \\"Use default build command\\" and add the command: \\"make\nall\\" in the box below. At the bottom make sure the path is set to the\n\\"firmware\\" path, this is where the Makefile lives.\n',(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Projects_Properties_make_settings.png",title:"wikilink"},"images/Eclipse_Projects_Properties_make_settings.png")),(0,a.kt)("p",null,'Now go to \\"Project\\" in the toolbar and click \\"Build All\\", if\neverything is set correctly the project will build and the compile\nmessage will be shown in the console window.\n',(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Project_Build-all.png",title:"wikilink"},"images/Eclipse_Project_Build-all.png"),"\n",(0,a.kt)("a",{parentName:"p",href:"images/Eclipse_Project_Compile.png",title:"wikilink"},"images/Eclipse_Project_Compile.png")),(0,a.kt)("h3",{id:"command_line_osx_and_linux"},"Command Line (OSX and Linux)"),(0,a.kt)("p",null,'You don\\\'t need to use Eclipse, you can use any text editor you like.\nAfter editing the code to your needs, just open a terminal and change\ndirectory to the \\"firmware\\" folder. There you run \\"make all\\". This\nwill make the \\"main.bin\\" file. This file can then be flashed to the\nhardware.'),(0,a.kt)("p",null,"If you receive an error that the arm tool chain can not be found:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'user@pc:~/git/OpenSource-EBike-firmware/Color_LCD/firmware$ make all\n# cd SW102; make\ncd 850C/src; make clean; make\nrm -f main.lst main.elf main.bin\nrm ../../common/src/*.o\nfind *.o | xargs rm\nfind spl/src/*.o | xargs rm\nfind spl/CMSIS/*.o | xargs rm\n.compiling\narm-none-eabi-gcc -I./GD32F10x_standard_peripheral/Include -I./ -I./spl/CMSIS -I./spl/CMSIS/inc -I./spl/inc -DUSE_FULL_ASSERT -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -c -fno-common -O0 -g -mcpu=cortex-m3 -mthumb -ffunction-sections -fdata-sections -l libgcc  -fno-builtin -std=c99 --specs=nano.specs --specs=nosys.specs -Wall -Werror -I../../common/include -DVERSION_STRING=\\"0.19.17\\" spl/CMSIS/system_stm32f10x.c -o spl/CMSIS/system_stm32f10x.o\nmake[1]: arm-none-eabi-gcc: No such file or directory\nmake[1]: *** [spl/CMSIS/system_stm32f10x.o] Error 1\nmake: *** [all] Error 2\n')),(0,a.kt)("p",null,'This is caused by the \\"Makefile\\", in there the toolchain is expected\nto be in the firmware directory, this can be changed by editing the\n\\"Makefile\\", for the \\\'850C LCD\\\' search for this line in the\n\\"Makefile\\" of the \\\'850C LCD\\\' directory:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"TCPREFIX = arm-none-eabi-\n")),(0,a.kt)("p",null,"and change it to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"ARM_GCC = /path/to/your/arm-tool-chain/bin/\nTCPREFIX = $(ARM_GCC)arm-none-eabi-\n")),(0,a.kt)("p",null,"And for the \\'SW102 LCD\\' search for the line below in the\nMakefile.windows in the\ndirectory:\\\"\u2068./git\u2069/OpenSource-EBike-firmware\u2069/Color_LCD\u2069/firmware\u2069/SW102\u2069/\u2068nRF5_SDK_12.3.0\u2069/\u2068components\u2069/toolchain\u2069/gcc\u2069\\\"\nchange it to reflect your GNU-ARM directory from Step 1."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"GNU_INSTALL_ROOT := /path/to/the/toolchain/bin/\n")),(0,a.kt)("h3",{id:"on_windows"},"On Windows"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Double-click Start_Compiling.bat to compile the firmware. The\nresulting main.ihx can be programmed in the controller.")),(0,a.kt)("h2",{id:"step_7___flashing"},"Step 7 - Flashing"),(0,a.kt)("h3",{id:"graphical_with_eclipse_1"},"Graphical with Eclipse"),(0,a.kt)("h3",{id:"command_line"},"Command line"))}h.isMDXComponent=!0}}]);